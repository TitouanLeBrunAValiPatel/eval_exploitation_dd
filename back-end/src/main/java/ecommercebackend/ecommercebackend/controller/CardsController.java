package ecommercebackend.ecommercebackend.controller;

import ecommercebackend.ecommercebackend.data.entity.database.Card;
import ecommercebackend.ecommercebackend.dto.CardDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.MissingFieldException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import ecommercebackend.ecommercebackend.service.CardService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class CardsController implements CrudController<CardDTO> {

    private final CardService cardService;

    @GetMapping("/cards")
    @Override
    public List<CardDTO> findAllItem() {
        return cardService.getAllItem();
    }

    @GetMapping("/cards/{id}")
    @Override
    public CardDTO findItemById(@PathVariable("id") int id) throws InvalidIdException {
        return cardService.getItemById(id);
    }

    @PostMapping("/cards")
    @Override
    public CardDTO createItem(@RequestBody CardDTO item) throws InvalidIdException, MissingFieldException, NotfoundException {
        if (item.getCardExpiration() == null
                || item.getCardName() == null
                || item.getCardNumber() == 0
                || item.getCryptogram() == 0
                || item.getUserDTO() == null) {
            throw new MissingFieldException(Card.class);
        }
        return cardService.addItem(item);
    }

    @DeleteMapping("/cards/{id}")
    @Override
    public void removeItemById(@PathVariable("id") int id) {
        cardService.deleteItemById(id);
    }

    @PutMapping("/cards")
    @Override
    public CardDTO updateItem(@RequestBody CardDTO item) {
        return cardService.updateItem(item);
    }
}
