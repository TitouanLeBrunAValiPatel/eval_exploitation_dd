package ecommercebackend.ecommercebackend.controller;

import ecommercebackend.ecommercebackend.data.entity.database.FavoriteProduct;
import ecommercebackend.ecommercebackend.dto.FavoriteProductDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.MissingFieldException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import ecommercebackend.ecommercebackend.service.FavoriteProductsService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class FavoriteProductsController implements CrudController<FavoriteProductDTO> {

    private final FavoriteProductsService favoriteProductsService;

    @Override
    @GetMapping("/products/favorite")
    public List<FavoriteProductDTO> findAllItem() {
        return favoriteProductsService.getAllItem();
    }

    @Override

    @GetMapping("/products/favorite/{id}")
    public FavoriteProductDTO findItemById(@PathVariable("id") int id) throws InvalidIdException {
        return favoriteProductsService.getItemById(id);
    }

    @Override

    @PostMapping("/products/favorite")
    public FavoriteProductDTO createItem(@RequestBody FavoriteProductDTO item) throws Exception {
        if (item.getProduct() == null || item.getUser() == null) {
            throw new MissingFieldException(FavoriteProduct.class);
        }
        return favoriteProductsService.addItem(item);
    }

    @Override
    @DeleteMapping("/aaa")
    public void removeItemById(int id) {
        throw new RuntimeException("root no available");
    }

    @DeleteMapping("/products/favorite")
    public void removeItemById(@RequestBody FavoriteProductDTO item) {
        favoriteProductsService.deleteItem(item);
    }

    @Override
    @PutMapping("/products/favorite")
    public FavoriteProductDTO updateItem(@RequestBody FavoriteProductDTO item) {
        return favoriteProductsService.updateItem(item);
    }
}