package ecommercebackend.ecommercebackend.controller;

import com.fasterxml.jackson.databind.JsonNode;
import ecommercebackend.ecommercebackend.data.entity.database.User;
import ecommercebackend.ecommercebackend.dto.UserDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.MissingFieldException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import ecommercebackend.ecommercebackend.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class UsersController implements CrudController<UserDTO> {

    private final UserService userService;

    @GetMapping("/users")
    @Override
    public List<UserDTO> findAllItem() {
        return userService.getAllItem();
    }

    @PostMapping("/auth")
    public UserDTO auth(@RequestBody JsonNode jsonNode) throws Exception {
        return userService.auth(jsonNode);
    }

    @PostMapping("/auth/google")
    public UserDTO googleAuth(@RequestBody JsonNode jsonNode) throws Exception {
        return userService.googleAuth(jsonNode);
    }

    @GetMapping("/users/{id}")
    @Override
    public UserDTO findItemById(@PathVariable("id") int id) throws InvalidIdException, NotfoundException {
        return userService.getItemById(id);
    }

    @PostMapping("/users")
    @Override
    public UserDTO createItem(@RequestBody UserDTO item) throws Exception {
        if (item.getName() == null || item.getMail() == null || item.getPassword() == null) {
            throw new MissingFieldException(User.class);
        }
        return userService.addItem(item);
    }

    @DeleteMapping("/users/{id}")
    @Override
    public void removeItemById(@PathVariable("id") int id) {
        userService.deleteItemById(id);
    }

    @PutMapping("/users")
    @Override
    public UserDTO updateItem(@RequestBody UserDTO item) throws InvalidIdException, NotfoundException {
        return userService.updateItem(item);
    }
}
