package ecommercebackend.ecommercebackend.controller;

import ecommercebackend.ecommercebackend.data.entity.database.Order;
import ecommercebackend.ecommercebackend.dto.OrderDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.MissingFieldException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import ecommercebackend.ecommercebackend.service.OrderService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class OrdersController implements CrudController<OrderDTO> {

    private final OrderService orderService;

    @GetMapping("/orders")
    @Override
    public List<OrderDTO> findAllItem() {
        return orderService.getAllItem();
    }

    @GetMapping("/orders/users/{userId}")
    public List<OrderDTO> findAllItemByUserId(@PathVariable("userId") int id) throws Exception {
        return orderService.getAllItemByUserId(id);
    }

    @GetMapping("/orders/{id}")
    @Override
    public OrderDTO findItemById(@PathVariable("id") int id) throws InvalidIdException, NotfoundException {
        return orderService.getItemById(id);
    }

    @PostMapping("/orders")
    @Override
    public OrderDTO createItem(@RequestBody OrderDTO item) throws Exception {
        if (item.getOrderAndCartProductDTOS() == null
                || item.getUserDTO() == null
                || item.getCardDTO() == null) {
            throw new MissingFieldException(Order.class);
        }
        return orderService.addItem(item);
    }

    @DeleteMapping("/orders/{id}")
    @Override
    public void removeItemById(@PathVariable("id") int id) {
        orderService.deleteItemById(id);
    }

    @PutMapping("/orders")
    @Override
    public OrderDTO updateItem(@RequestBody OrderDTO item) {
        return orderService.updateItem(item);
    }
}
