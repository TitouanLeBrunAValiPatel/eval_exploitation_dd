package ecommercebackend.ecommercebackend.controller;

import ecommercebackend.ecommercebackend.data.entity.database.Cart;
import ecommercebackend.ecommercebackend.data.entity.database.CartProduct;
import ecommercebackend.ecommercebackend.dto.CartDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.MissingFieldException;
import ecommercebackend.ecommercebackend.service.CartService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class CartsController implements CrudController<CartDTO> {

    private final CartService cartService;

    @GetMapping("/carts")
    @Override
    public List<CartDTO> findAllItem() {
        return cartService.getAllItem();
    }

    @GetMapping("/carts/{id}")
    @Override
    public CartDTO findItemById(@PathVariable("id") int id) throws InvalidIdException {
        return cartService.getItemById(id);
    }

    @GetMapping("/carts/user/{id}")
    public CartDTO findAllByUserId(@PathVariable("id") int id) throws InvalidIdException {
        return cartService.getCartOfUser(id);
    }

    @PostMapping("/carts")
    @Override
    public CartDTO createItem(@RequestBody CartDTO item) throws Exception {
        if (item.getUserDTO() == null || item.getProductOrderDTOS() == null) {
            throw new MissingFieldException(Cart.class);
        }
        return cartService.addItem(item);
    }

    @DeleteMapping("/carts/{id}")
    @Override
    public void removeItemById(@PathVariable("id") int id) {
        cartService.deleteItemById(id);
    }

    @DeleteMapping("/carts/product")
    public void removeItemByIdFromParentItem(@RequestBody CartProduct cartProduct) {
        cartService.deleteItemByIdFromParentItem(cartProduct);
    }

    @PutMapping("/carts/product")
    public void editCartProduct(@RequestBody CartProduct cartProduct) throws MissingFieldException {
        if (cartProduct.getProduct() == null
                || cartProduct.getQuantity() == 0
                || cartProduct.getColor() == null
                || cartProduct.getCart() == null) {
            throw new MissingFieldException(CartProduct.class);
        }
        cartService.updateCartProduct(cartProduct);
    }

    @PutMapping("/carts")
    @Override
    public CartDTO updateItem(@RequestBody CartDTO item) {
        return cartService.updateItem(item);
    }
}
