package ecommercebackend.ecommercebackend.dto.mapper;

import ecommercebackend.ecommercebackend.data.entity.database.Color;
import ecommercebackend.ecommercebackend.data.entity.database.OrderProduct;
import ecommercebackend.ecommercebackend.data.entity.database.Product;
import ecommercebackend.ecommercebackend.dto.product.OrderProductDTO;
import ecommercebackend.ecommercebackend.dto.product.ProductDTO;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ProductMapper {
    //    todo faire tous les autres dto quand finis
    private final MapstructMapper mapper;

    public ProductDTO productToProductDto(Product product, List<Color> colors, int ratingNumber, float averageNote) {
        return new ProductDTO(
                product.getId(),
                mapper.categoryToCategoryDTO(product.getCategory()),
                product.getName(),
                product.getDescription(),
                product.getStock(),
                product.getPrice(),
                mapper.imageToImageDTO(product.getImages()),
                mapper.colorToColorDTO(colors),
                ratingNumber,
                averageNote
        );
    }

    public Product productDtoToProduct(ProductDTO productDto) {
        return new Product(
                productDto.getId(),
                mapper.categoryDTotoCategory(productDto.getCategory()),
                productDto.getName(),
                productDto.getDescription(),
                productDto.getStock(),
                productDto.getPrice(),
                mapper.imageDTOToImage(productDto.getImages())
        );
    }

    public OrderProductDTO productToOrderProductDTO(OrderProduct orderProduct, int total) {
        return new OrderProductDTO(
                orderProduct.getProduct().getId(),
                orderProduct.getProduct().getName(),
                orderProduct.getProduct().getDescription(),
                orderProduct.getProduct().getPrice(),
                mapper.categoryToCategoryDTO(orderProduct.getProduct().getCategory()),
                mapper.imageToImageDTO(orderProduct.getProduct().getImages().get(0)),
                mapper.colorToColorDTO(orderProduct.getColor()),
                orderProduct.getQuantity(),
                total
        );
    }

}
