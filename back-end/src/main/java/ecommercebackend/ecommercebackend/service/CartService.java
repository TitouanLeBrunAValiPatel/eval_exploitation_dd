package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.*;
import ecommercebackend.ecommercebackend.data.repository.*;
import ecommercebackend.ecommercebackend.dto.CartDTO;
import ecommercebackend.ecommercebackend.dto.UserDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.dto.mapper.ProductMapper;
import ecommercebackend.ecommercebackend.dto.product.ProductOrderDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CartService implements CrudService<CartDTO> {
    private final CartRepository cartRepository;
    private final UserRepository userRepository;
    private final ProductMapper productMapper;
    private final CartProductRepository cartProductRepository;
    private final ColorRepository colorRepository;
    private final ProductRepository productRepository;
    private final UserService userService;

    @Override
    public List<CartDTO> getAllItem() {
        return MapstructMapper.INSTANCE.cartDTOToCart(cartRepository.findAll());
    }

    @Override
    public CartDTO getItemById(int id) throws InvalidIdException {
        try {
            return MapstructMapper.INSTANCE.cartToCartDTO(cartRepository.findById(id));
        } catch (Exception e) {
            throw new InvalidIdException(Category.class, id);
        }
    }

    @Override
    @Transactional
    public CartDTO addItem(CartDTO item) throws Exception {
        if (cartRepository.findCartByUserId(item.getUserDTO().getId()) != null) {
            throw new Exception("cart already exist");
        }
        User user = userRepository.findById(item.getUserDTO().getId());
        UserDTO userDTO = MapstructMapper.INSTANCE.userToUserDTO(user);
        item.setUserDTO(userDTO);

        Cart cart = cartRepository.save(MapstructMapper.INSTANCE.cartDTOToCart(item));
        List<ProductOrderDTO> productOrderDTOS = new ArrayList<>();

        for (ProductOrderDTO productOrderDTO : item.getProductOrderDTOS()) {
            Color color = colorRepository.findById(productOrderDTO.getColor().getId());
            Product product = productRepository.findById(productOrderDTO.getId());

            CartProduct cartProduct = new CartProduct(cart, product, color, productOrderDTO.getQuantity());
            cartProductRepository.save(cartProduct);
            productOrderDTOS.add(productMapper.productToCartProductDTO(cartProduct, product.getPrice() * productOrderDTO.getQuantity()));
        }
        item.setProductOrderDTOS(productOrderDTOS);
        item.setId(cart.getId());
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        cartRepository.deleteById(id);
    }

    @Transactional
    public void deleteItemByIdFromParentItem(CartProduct cartProduct) {
        List<CartProduct> cartProducts = cartProductRepository.findAllByCartId(cartProduct.getCart().getId());
        CartProduct cartProductToDelete = null;
        for (CartProduct product : cartProducts) {
            if(product.getProduct().getId() == cartProduct.getProduct().getId() &&
                    product.getColor().getId() == cartProduct.getColor().getId()) {
                cartProductToDelete = product;
            }
        }
        assert cartProductToDelete != null;
        cartProductRepository.deleteByCartIdAndAndColorIdAndAndProductId(
                cartProductToDelete.getCart().getId(),cartProductToDelete.getColor().getId(),cartProductToDelete.getProduct().getId());
    }

    @Override
    public CartDTO updateItem(CartDTO item) {
        cartRepository.save(MapstructMapper.INSTANCE.cartDTOToCart(item));
        return item;
    }

    public CartDTO getCartOfUser(int id) throws InvalidIdException {
        UserDTO user = userService.getItemById(id);
        return MapstructMapper.INSTANCE.cartToCartDTO(cartRepository.findCartByUserId(id));
    }

    @Transactional
    public void updateCartProduct(CartProduct cartProduct) {
        CartProduct oldCartProduct = cartProductRepository.findByCartIdAndAndProductIdAndColorId(cartProduct.getCart().getId(),
                cartProduct.getProduct().getId(),cartProduct.getColor().getId());
        oldCartProduct.setQuantity(cartProduct.getQuantity());
         cartProductRepository.save(oldCartProduct);
    }
}
