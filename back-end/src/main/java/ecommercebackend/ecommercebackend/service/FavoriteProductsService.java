package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.FavoriteProduct;
import ecommercebackend.ecommercebackend.data.entity.database.Product;
import ecommercebackend.ecommercebackend.data.entity.database.User;
import ecommercebackend.ecommercebackend.data.repository.FavoriteProductsRepository;
import ecommercebackend.ecommercebackend.data.repository.ProductRepository;
import ecommercebackend.ecommercebackend.data.repository.UserRepository;
import ecommercebackend.ecommercebackend.dto.FavoriteProductDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.dto.mapper.ProductMapper;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class FavoriteProductsService implements CrudService<FavoriteProductDTO> {

    private final FavoriteProductsRepository favoriteProductsRepository;
    private final ProductService productService;
    private final UserService userService;
    private final ProductMapper productMapper;
    private final ProductRepository productRepository;
    private final UserRepository userRepository;
    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public List<FavoriteProductDTO> getAllItem() {
        return MapstructMapper.INSTANCE.favoriteProductToFavoriteProductDTO(favoriteProductsRepository.findAll());
    }

    @Override
    public FavoriteProductDTO getItemById(int id) throws Exception {
//        FavoriteProduct favoriteProduct = favoriteProductsRepository.findByUserId(id);:
//        if (favoriteProduct == null) {
//            throw new InvalidIdException(Color.class, id);
//        }
//        return MapstructMapper.INSTANCE.favoriteProductToFavoriteProductDTO(favoriteProduct);
        throw new Exception("path not usefull contact support");
    }

    @Override
    @Transactional
    public FavoriteProductDTO addItem(FavoriteProductDTO item) throws Exception {
        if (favoriteProductsRepository.findByUserIdAndAndProductId(item.getUser().getId(), item.getProduct().getId()) != null) {
            throw new Exception("favorite product already exist");
        }
        Product product = productRepository.findById(item.getProduct().getId())
                .orElseThrow(() -> new NotfoundException(Product.class));
        User user = userRepository.findById(item.getUser().getId())
                .orElseThrow(() -> new NotfoundException(User.class));
        FavoriteProduct favoriteProduct = MapstructMapper.INSTANCE.favoriteProductDTOToFavoriteProduct(item);
        favoriteProduct.setProduct(product);
        favoriteProduct.setUser(user);

        return MapstructMapper.INSTANCE.favoriteProductToFavoriteProductDTO(favoriteProductsRepository.save(favoriteProduct));
    }


    @Override
    public void deleteItemById(int id) {
        favoriteProductsRepository.deleteById(id);
    }

    @Transactional
    public void deleteItem(FavoriteProductDTO favoriteProductDTO) {
        favoriteProductsRepository.deleteByProductIdAndUserId(favoriteProductDTO.getProduct().getId(), favoriteProductDTO.getUser().getId());
    }

    @Override
    public FavoriteProductDTO updateItem(FavoriteProductDTO item) {
        FavoriteProduct favoriteProduct = favoriteProductsRepository.save(MapstructMapper.INSTANCE.favoriteProductDTOToFavoriteProduct(item));
        return MapstructMapper.INSTANCE.favoriteProductToFavoriteProductDTO(favoriteProduct);
    }


}
