package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Color;
import ecommercebackend.ecommercebackend.data.entity.database.Order;
import ecommercebackend.ecommercebackend.data.entity.database.OrderProduct;
import ecommercebackend.ecommercebackend.data.entity.database.Product;
import ecommercebackend.ecommercebackend.data.repository.OrderProductRepository;
import ecommercebackend.ecommercebackend.data.repository.OrderRepository;
import ecommercebackend.ecommercebackend.dto.OrderDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.dto.mapper.ProductMapper;
import ecommercebackend.ecommercebackend.dto.product.ProductOrderDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class OrderService implements CrudService<OrderDTO> {

    private final OrderRepository orderRepository;
    private final OrderProductRepository orderProductRepository;
    private final ProductMapper productMapper;
    private final ProductService productService;
    private final ColorService colorService;
    private final UserService userService;
    private final CardService cardService;


    @Override
    public List<OrderDTO> getAllItem() {
        return MapstructMapper.INSTANCE.orderToOrderDTO(orderRepository.findAll());
    }

    public List<OrderDTO> getAllItemByUserId(int userId) throws InvalidIdException {
        userService.getItemById(userId);
        List<Order> orders = orderRepository.findAllByUserId(userId);
        List<OrderDTO> orderDTOS = new ArrayList<>();
        for (Order order : orders) {
            OrderDTO orderDTO = findOrderDTO(order, order.getId());
            orderDTO.setCardDTO(null);
            orderDTO.setUserDTO(null);
            orderDTO.setProductOrderDTOS(null);
            orderDTOS.add(orderDTO);
        }
        return orderDTOS;
    }

    @Override
    public OrderDTO getItemById(int id) throws InvalidIdException {
        Order order = orderRepository.findById(id);
        return findOrderDTO(order, id);
    }

    @Override
    @Transactional
    public OrderDTO addItem(OrderDTO item) throws InvalidIdException {
        float totalPrice = 0;
        for (ProductOrderDTO orderProductDTO : item.getProductOrderDTOS()) {
            Product product = productMapper.productDtoToProduct(productService.getItemById(orderProductDTO.getId()));
            Color color = MapstructMapper.INSTANCE.colorDTOtoColor(colorService.getItemById(orderProductDTO.getColor().getId()));
            totalPrice += product.getPrice() * orderProductDTO.getQuantity();
//            OrderProduct orderProduct = new OrderProduct(order,product,color,orderProductDTO.getQuantity());
//            orderProductRepository.save(orderProduct);
        }
        item.setTotalPrice(totalPrice);
        Order order = MapstructMapper.INSTANCE.orderDTOToOrder(item);
        item.setTotalPrice(totalPrice);
        item.setUserDTO(userService.getItemById(item.getUserDTO().getId()));
        item.setCardDTO(cardService.getItemById(item.getCardDTO().getId()));
        orderRepository.save(MapstructMapper.INSTANCE.orderDTOToOrder(item));
//        item.setId(order.getId());
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        orderRepository.deleteById(id);
    }

    @Override
    public OrderDTO updateItem(OrderDTO item) {
        orderRepository.save(MapstructMapper.INSTANCE.orderDTOToOrder(item));
        return item;
    }

    public OrderDTO findOrderDTO(Order order, int id) throws InvalidIdException {
        if (order == null) {
            throw new InvalidIdException(Order.class, id);
        }
        List<OrderProduct> orderProducts = orderProductRepository.findAllByOrderId(id);
        List<ProductOrderDTO> productOrderDTOS = new ArrayList<>();
        int numberTotalQuantity = 0;
        int numberOfArticle = 0;
        float total_price = 0;
        for (OrderProduct orderProduct : orderProducts) {
            int total = orderProduct.getQuantity() * orderProduct.getProduct().getPrice();
            productOrderDTOS.add(productMapper.productToOrderProductDTO(orderProduct, total));
            numberTotalQuantity += orderProduct.getQuantity();
            total_price += total;
            numberOfArticle++;
        }
        return MapstructMapper.INSTANCE.orderToOrderDTO(order, productOrderDTOS, numberTotalQuantity, total_price, numberOfArticle);
    }

}
