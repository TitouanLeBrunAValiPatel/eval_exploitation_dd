package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Category;
import ecommercebackend.ecommercebackend.data.repository.CategoryRepository;
import ecommercebackend.ecommercebackend.dto.CategoryDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;

@Service
@RequiredArgsConstructor
public class CategoryService implements CrudService<CategoryDTO> {

    private final CategoryRepository categoryRepository;
    private final MapstructMapper mapper;

    @Override
    public List<CategoryDTO> getAllItem() throws NotfoundException {
        return mapper.categoryToCategoryDTO(categoryRepository.findAll());
    }

    @Override
    public CategoryDTO getItemById(int id) throws Exception {
        Category category = categoryRepository.findById(id);
        if (Objects.equals(category, null)) {
            throw new InvalidIdException(Category.class, id);
        }
        return mapper.categoryToCategoryDTO(category);
    }

    @Override
    public CategoryDTO addItem(CategoryDTO item) {
        categoryRepository.save(mapper.categoryDTotoCategory(item));
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        categoryRepository.deleteById(id);
    }

    @Override
    public CategoryDTO updateItem(CategoryDTO item) {
        categoryRepository.save(mapper.categoryDTotoCategory(item));
        return item;
    }


}
