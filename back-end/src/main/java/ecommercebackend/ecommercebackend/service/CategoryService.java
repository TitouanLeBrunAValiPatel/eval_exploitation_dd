package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Category;
import ecommercebackend.ecommercebackend.data.repository.CategoryRepository;
import ecommercebackend.ecommercebackend.dto.CategoryDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CategoryService implements CrudService<CategoryDTO> {

    private final CategoryRepository categoryRepository;

    @Override
    public List<CategoryDTO> getAllItem() throws NotfoundException {
        return MapstructMapper.INSTANCE.categoryToCategoryDTO(categoryRepository.findAll());
    }

    @Override
    public CategoryDTO getItemById(int id) throws Exception {
        Category category = categoryRepository.findById(id).orElseThrow(() -> new NotfoundException(Category.class));
        return MapstructMapper.INSTANCE.categoryToCategoryDTO(category);
    }

    @Override
    public CategoryDTO addItem(CategoryDTO item) {
        categoryRepository.save(MapstructMapper.INSTANCE.categoryDTotoCategory(item));
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        categoryRepository.deleteById(id);
    }

    @Override
    public CategoryDTO updateItem(CategoryDTO item) {
        categoryRepository.save(MapstructMapper.INSTANCE.categoryDTotoCategory(item));
        return item;
    }


}
