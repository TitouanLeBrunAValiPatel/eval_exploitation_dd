package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.*;
import ecommercebackend.ecommercebackend.data.repository.ImageRepository;
import ecommercebackend.ecommercebackend.data.repository.ProductColorRepository;
import ecommercebackend.ecommercebackend.data.repository.ProductRepository;
import ecommercebackend.ecommercebackend.data.repository.RatingRepository;
import ecommercebackend.ecommercebackend.dto.ColorDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.dto.mapper.ProductMapper;
import ecommercebackend.ecommercebackend.dto.product.ProductDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ProductService implements CrudService<ProductDTO> {

    private final ProductRepository productRepository;
    private final ProductColorRepository productColorRepository;
    private final ImageRepository imageRepository;
    private final RatingRepository ratingRepository;
    private final ProductMapper productMapper;
    private final CategoryService categoryService;
    private final ColorService colorService;

    public ProductDTO getItemById(int id) throws InvalidIdException {
        Product product = productRepository.findById(id);
        if (product == null) {
            throw new InvalidIdException(Product.class, id);
        }
        List<Color> colors = productColorRepository.findAllByProductId(id).stream()
                .map(ProductColor::getColor)
                .toList();

        List<Rating> ratings = ratingRepository.findAllByProductId(product.getId());
        List<Image> images = imageRepository.findAllByProductId(id);
        product.setImages(images);

        float averageRate = 0;
        int numberOfRate = 0;
        for (Rating rating : ratings) {
            averageRate += rating.getNote();
            numberOfRate++;
        }
        averageRate = averageRate / ratings.size();

        return productMapper.productToProductDto(product, colors, numberOfRate, averageRate);
    }

    @Override
    public List<ProductDTO> getAllItem() {
        List<Product> products = productRepository.findAll();
        return this.createDTOs(products);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ProductDTO addItem(ProductDTO item) throws Exception {
        Product product = productMapper.productDtoToProduct(item);
        List<Color> colors = new ArrayList<>();
        product.setCategory(MapstructMapper.INSTANCE.categoryDTotoCategory(categoryService.getItemById(item.getCategory().getId())));
        List<Image> images = MapstructMapper.INSTANCE.imageDTOToImage(item.getImages());
        List<Image> finalImages = new ArrayList<>();

        product.setImages(null);
        Product product1 = productRepository.save(product);
        if (item.getColors() != null) {
            for (ColorDTO colorDTO : item.getColors()) {
                Color color = colorService.getItemById(colorDTO.getId());
                ProductColor productColor = new ProductColor(product, color);
                productColorRepository.save(productColor);
                colors.add(color);
            }
        }
        if (item.getImages() != null) {
            images.forEach(imageDTO -> {
                Image image = new Image(0, imageDTO.getImage(), product);
                finalImages.add(imageRepository.save(image));
            });
        }
        product1.setImages(finalImages);
        return productMapper.productToProductDto(product1, colors, 0, 0);
    }

    @Override
    public void deleteItemById(int id) {
        productRepository.deleteById(id);
    }

    @Override
    public ProductDTO updateItem(ProductDTO item) {
        productRepository.save(productMapper.productDtoToProduct(item));
        return item;
    }


    public List<ProductDTO> getAllItemByCategoryId(int categoryId) throws Exception {
        List<ProductDTO> productDTOS = this.createDTOs(productRepository.findAllByCategoryId(categoryId));
        if (productDTOS.isEmpty()) {
            throw new InvalidIdException(Category.class, categoryId);
        }
        return productDTOS;
    }

    public List<ProductDTO> createDTOs(List<Product> products) {
        List<Image> images = imageRepository.findAll();
        List<Rating> ratings = ratingRepository.findAll();
        List<ProductDTO> productDTOS = new ArrayList<>();
        //todo une image, pas de couleur, category

        for (Product product : products) {
            List<Rating> productRatings = ratings.stream()
                    .filter(rating -> rating.getProduct().getId() == product.getId())
                    .toList();

            List<Image> productImages = images.stream()
                    .filter(image -> image.getProduct().getId() == product.getId())
                    .toList();

            List<Image> oneImage = new ArrayList<>();
            if (!productImages.isEmpty()) {
                oneImage.add(productImages.get(0));
            }
            product.setImages(oneImage);

            float averageRate = 0;
            int numberOfRate = 0;
            for (Rating rating : productRatings) {
                averageRate += rating.getNote();
                numberOfRate++;
            }
            if (!productRatings.isEmpty()) {
                averageRate = averageRate / productRatings.size();
            }
            productDTOS.add(productMapper.productToProductDto(product, null, numberOfRate, averageRate));
        }
        return productDTOS;
    }

    public List<ProductDTO> getAllBestSellers() {
        List<Product> products = productRepository.findAllBestSellers();
        return createDTOs(products);
    }
}
