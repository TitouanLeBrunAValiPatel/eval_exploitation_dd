package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.entity.Image;
import ecommercebackend.ecommercebackend.entity.Order;
import ecommercebackend.ecommercebackend.entity.Product;
import ecommercebackend.ecommercebackend.entity.ProductImage;
import ecommercebackend.ecommercebackend.entity.front.CompleteProduct;
import ecommercebackend.ecommercebackend.repository.ImageRepository;
import ecommercebackend.ecommercebackend.repository.ProductImageRepository;
import ecommercebackend.ecommercebackend.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ProductService implements CrudService<Product> {

    private final ProductRepository productRepository;
    private final ProductImageRepository productImageRepository;
    private final ImageRepository imageRepository;
    private final OrderService orderService;


    @Override
    public List<Product> getAllItem() {
        return productRepository.findAll();
    }

    public List<Product> getAllItemByCategoryId(int id) {
//        return productRepository.findAllByCategory(id);
        return null;
    }

    public CompleteProduct getCompleteItemById(int product_id) {
        List<ProductImage> productImages = productImageRepository.findByProductId(product_id);
        List<Image> images = new ArrayList<>();
        for (ProductImage productImage : productImages) {
            images.add(productImage.getImage());
        }

        return new CompleteProduct(
                productImages.get(0).getProduct().getId(),
                productImages.get(0).getProduct().getCategory().getId(),
                productImages.get(0).getProduct().getName(),
                productImages.get(0).getProduct().getDescription(),
                productImages.get(0).getProduct().getStock(),
                productImages.get(0).getProduct().getPrice(),
                images
        );
    }


    public List<CompleteProduct> getCompleteItems() {
        List<ProductImage> productImages = productImageRepository.findAll();
        List<CompleteProduct> completeProducts = new ArrayList<>();

        for (ProductImage productImage : productImages) {
            if (completeProducts.stream().anyMatch(completeProduct -> completeProduct.getId() == productImage.getProduct().getId())) {
                Optional<CompleteProduct> completeProduct = completeProducts.stream()
                        .filter(completeProduct1 -> completeProduct1.getId() == productImage.getProduct().getId())
                        .findFirst();
                completeProduct.ifPresent(product -> product.addImage(productImage.getImage()));
            }

            List<Image> images = new ArrayList<>();
            images.add(productImage.getImage());

            completeProducts.add(new CompleteProduct(
                    productImages.get(0).getProduct().getId(),
                    productImages.get(0).getProduct().getCategory().getId(),
                    productImages.get(0).getProduct().getName(),
                    productImages.get(0).getProduct().getDescription(),
                    productImages.get(0).getProduct().getStock(),
                    productImages.get(0).getProduct().getPrice(),
                    images
            ));
        }
        return completeProducts;
    }

    public List<CompleteProduct> getBestSellerProduct() {
        List<CompleteProduct> completeProducts = this.getCompleteItems();
        List<Order> orders = orderService.getAllItem();
//        for (CompleteProduct completeProduct : completeProducts) {
//            List<Order> myOrders = orders.stream()
//                    .filter(order -> order.getProductId() == completeProduct.getId())
//                    .toList();
//        }
        return null;
    }

    @Override
    public Optional<Product> getItemById(int id) {
        return productRepository.findById(id);
    }

    @Override
    public Product addItem(Product item) {
        return productRepository.save(item);
    }

    @Override
    public void deleteItemById(int id) {
        productRepository.deleteById(id);
    }

    @Override
    public Product updateItem(Product item) {
        return productRepository.save(item);
    }


}
