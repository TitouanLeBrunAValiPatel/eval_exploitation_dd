package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.entity.*;
import ecommercebackend.ecommercebackend.repository.ImageRepository;
import ecommercebackend.ecommercebackend.repository.ProductImageRepository;
import ecommercebackend.ecommercebackend.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ProductService implements CrudService<Product> {

    private final ProductRepository productRepository;
    private final ProductImageRepository productImageRepository;
    private final ImageRepository imageRepository;
    private final OrderService orderService;


    @Override
    public List<Product> getAllItem() {
        return productRepository.findAll();
    }

    public List<Product> getAllItemByCategoryId(int id) {
//        return productRepository.findAllByCategory(id);
        return null;
    }

    public CompleteProduct getCompleteItemById(int product_id) {

        List<ProductImage> productImages = productImageRepository.findAllByProductId(product_id);
//        List<ProductImage> productImages = productImageRepository.findAll();
//
//        Optional<Product> product = productRepository.findById(productImages.get(0).getProductId());
//
//
//        List<Image> images = new ArrayList<>();
//
//        for (ProductImage productImage : productImages) {
//            Optional<Image> image = imageRepository.findById(productImage.getImageId());
//            image.ifPresent(images::add);
//        }
//
//        if (product.isPresent()) {
//            Product product1 = product.get();
//
//            return new CompleteProduct( product1.getId(),
//                    product1.getIdCategory(),
//                    product1.getName(),
//                    product1.getDescription(),
//                    product1.getStock(),
//                    product1.getPrice(),
//                    images
//            );
//        }
        return null;
    }


    public List<CompleteProduct> getCompleteItems() {
        List<ProductImage> productImages = productImageRepository.findAll();
        List<Product> products = productRepository.findAll();
        List<Image> images = imageRepository.findAll();

        List<CompleteProduct> completeProducts = new ArrayList<>();

        for (ProductImage productImage : productImages) {

            Product product1 = new Product();

//            for (Product product : products) {
//                if (product.getId() == productImage.getProductId()) {
//                    product1 = product;
//                }
//            }
//
//            List<Image> imageOfProduct = new ArrayList<>();
//
//            for (Image image : images) {
//                if (image.getId() == productImage.getImageId()) {
//                    imageOfProduct.add(image);
//                }
//            }
//            CompleteProduct completeProduct = new CompleteProduct(
//                    product1.getId(),
//                    product1.getIdCategory(),
//                    product1.getName(),
//                    product1.getDescription(),
//                    product1.getStock(),
//                    product1.getPrice(),
//                    imageOfProduct
//            );
//            completeProducts.add(completeProduct);
        }
        return completeProducts;
    }

    public List<CompleteProduct> getBestSellerProduct() {
        List<CompleteProduct> completeProducts = this.getCompleteItems();
        List<Order> orders = orderService.getAllItem();
//        for (CompleteProduct completeProduct : completeProducts) {
//            List<Order> myOrders = orders.stream()
//                    .filter(order -> order.getProductId() == completeProduct.getId())
//                    .toList();
//        }
        return null;
    }

    @Override
    public Optional<Product> getItemById(int id) {
        return productRepository.findById(id);
    }

    @Override
    public Product addItem(Product item) {
        return productRepository.save(item);
    }

    @Override
    public void deleteItemById(int id) {
        productRepository.deleteById(id);
    }

    @Override
    public Product updateItem(Product item) {
        return productRepository.save(item);
    }


}
