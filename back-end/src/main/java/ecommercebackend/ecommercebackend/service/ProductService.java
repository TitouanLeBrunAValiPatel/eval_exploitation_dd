package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Image;
import ecommercebackend.ecommercebackend.data.entity.database.Product;
import ecommercebackend.ecommercebackend.data.entity.database.Rating;
import ecommercebackend.ecommercebackend.data.repository.ImageRepository;
import ecommercebackend.ecommercebackend.data.repository.ProductRepository;
import ecommercebackend.ecommercebackend.data.repository.RatingRepository;
import ecommercebackend.ecommercebackend.dto.Mapper;
import ecommercebackend.ecommercebackend.dto.ProductDto;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ProductService implements CrudService<ProductDto> {

    private final ProductRepository productRepository;
    private final ImageRepository imageRepository;
    private final RatingRepository ratingRepository;
    private final Mapper mapper;

    public List<Product> getAllItemByCategoryId(int id) {
//        return productRepository.findAllByCategory(id);
        return null;
    }

    public ProductDto getItemById(int id) {
        Product product = productRepository.findByIdWithImages(id);
        List<Rating> ratings = ratingRepository.findAllByProductId(product.getId());
        List<Image> images = imageRepository.findAllByProductId(id);
        product.setImages(images);

        float averageRate = 0;
        int numberOfRate = 0;
        for (Rating rating : ratings) {
            averageRate += rating.getNote();
            numberOfRate++;
        }
        averageRate = averageRate / ratings.size();

        return mapper.productToProductDto(product, numberOfRate, averageRate);
    }

    @Override
    public List<ProductDto> getAllItem() {
        List<Product> products = productRepository.findAll();

        //
//        for (ProductImage productImage : productImages) {
//            if (frontProducts.stream().anyMatch(frontProduct -> frontProduct.getId() == productImage.getProduct().getId())) {
//                Optional<FrontProduct> completeProduct = frontProducts.stream()
//                        .filter(frontProduct1 -> frontProduct1.getId() == productImage.getProduct().getId())
//                        .findFirst();
//                completeProduct.ifPresent(product -> product.addImage(productImage.getImage()));
//            }
//            List<Rating> productRatings = ratings.stream()
//                    .filter(rating -> rating.getProduct().getId() == productImage.getProduct().getId())
//                    .toList();
//            float averageRate = 0;
//            for (Rating rating : productRatings) {
//                averageRate += rating.getNote();
//            }
//            averageRate = averageRate / productRatings.size();
//
//            List<Image> images = new ArrayList<>();
//            images.add(productImage.getImage());
//
//            frontProducts.add(new FrontProduct(
//                    productImages.get(0).getProduct().getId(),
//                    productImages.get(0).getProduct().getCategory().getId(),
//                    productImages.get(0).getProduct().getName(),
//                    productImages.get(0).getProduct().getDescription(),
//                    productImages.get(0).getProduct().getStock(),
//                    productImages.get(0).getProduct().getPrice(),
//                    productRatings,
//                    averageRate,
//                    images
//            ));
//        }
        return new ArrayList<>();
    }

    @Override
    public ProductDto addItem(ProductDto item) {
//        return productRepository.save(item);
        return null;
    }

    @Override
    public void deleteItemById(int id) {
        productRepository.deleteById(id);
    }

    @Override
    public ProductDto updateItem(ProductDto item) {
//        return productRepository.save(item);
        return null;
    }


}
