package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Color;
import ecommercebackend.ecommercebackend.data.repository.ColorRepository;
import ecommercebackend.ecommercebackend.dto.ColorDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ColorService implements CrudService<ColorDTO> {

    private final ColorRepository colorRepository;

    @Override
    public List<ColorDTO> getAllItem() {
        return MapstructMapper.INSTANCE.colorToColorDTO(colorRepository.findAll());

    }

    @Override
    public ColorDTO getItemById(int id) throws InvalidIdException, NotfoundException {
        return MapstructMapper.INSTANCE.colorToColorDTO(colorRepository.findById(id).orElseThrow(() -> new NotfoundException(Color.class)));
    }

    @Override
    public ColorDTO addItem(ColorDTO item) {
        Color color = colorRepository.save(MapstructMapper.INSTANCE.colorDTOtoColor(item));
        item.setId(color.getId());
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        colorRepository.deleteById(id);
    }

    @Override
    public ColorDTO updateItem(ColorDTO item) {
        Color color = MapstructMapper.INSTANCE.colorDTOtoColor(item);
        colorRepository.save(color);
        return item;
    }


}
