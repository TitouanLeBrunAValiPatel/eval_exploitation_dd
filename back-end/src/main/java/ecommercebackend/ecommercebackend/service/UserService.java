package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.*;
import ecommercebackend.ecommercebackend.data.repository.UserCardRepository;
import ecommercebackend.ecommercebackend.data.repository.UserRepository;
import ecommercebackend.ecommercebackend.data.repository.UserRolesRepository;
import ecommercebackend.ecommercebackend.dto.CardDTO;
import ecommercebackend.ecommercebackend.dto.RoleDTO;
import ecommercebackend.ecommercebackend.dto.UserDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class UserService implements CrudService<UserDTO> {

    private final UserRepository userRepository;
    private final UserRolesRepository userRolesRepository;
    private final UserCardRepository userCardRepository;

    private final MapstructMapper mapper;

    @Override
    public List<UserDTO> getAllItem() {
        return mapper.userToUserDTO(userRepository.findAll());
    }

    @Override
    public UserDTO getItemById(int id) throws InvalidIdException {
        User user = userRepository.findById(id);
        if (user == null) {
            throw new InvalidIdException(User.class,id);
        }
        List<UserRole> userRoles = userRolesRepository.findAllByUserId(id);
        List<UserCard> userCards = userCardRepository.findAllByUserId(id);
        List<RoleDTO> roles = userRoles.stream()
                .map(userRole -> mapper.roleToRoleDTO(userRole.getRole()))
                .toList();
        List<CardDTO> cards = userCards.stream()
                .map(userCard -> mapper.cardToCardDTO(userCard.getCard()))
                .toList();
        return mapper.userToUserDTO(user,roles,cards);
    }

    @Override
    public UserDTO addItem(UserDTO item) {
        userRepository.save(mapper.userDTOtoUser(item));
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        userRepository.deleteById(id);
    }

    @Override
    public UserDTO updateItem(UserDTO item) {
        userRepository.save(mapper.userDTOtoUser(item));
        return item;
    }


}
