package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Category;
import ecommercebackend.ecommercebackend.data.repository.CardRepository;
import ecommercebackend.ecommercebackend.dto.CardDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CardService implements CrudService<CardDTO> {
    private final CardRepository cardRepository;

    @Override
    public List<CardDTO> getAllItem() {
        return MapstructMapper.INSTANCE.cardToCardDTO(cardRepository.findAll());
    }

    @Override
    public CardDTO getItemById(int id) throws InvalidIdException {
        try {
            return MapstructMapper.INSTANCE.cardToCardDTO(cardRepository.findById(id));
        } catch (Exception e) {
            throw new InvalidIdException(Category.class, id);
        }
    }

    @Override
    public CardDTO addItem(CardDTO item) {
        cardRepository.save(MapstructMapper.INSTANCE.cardDTOToCard(item));

        return item;
    }

    @Override
    public void deleteItemById(int id) {
        cardRepository.deleteById(id);
    }

    @Override
    public CardDTO updateItem(CardDTO item) {
        cardRepository.save(MapstructMapper.INSTANCE.cardDTOToCard(item));
        return item;
    }

    public List<CardDTO> findAllByUserId(int id) {
        return MapstructMapper.INSTANCE.cardToCardDTO(cardRepository.findAllByUserId(id));
    }
}
