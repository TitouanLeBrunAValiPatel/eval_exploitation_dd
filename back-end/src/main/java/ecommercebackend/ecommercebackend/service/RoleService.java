package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Category;
import ecommercebackend.ecommercebackend.data.entity.database.Role;
import ecommercebackend.ecommercebackend.data.entity.database.User;
import ecommercebackend.ecommercebackend.data.entity.database.UserRole;
import ecommercebackend.ecommercebackend.data.repository.RoleRepository;
import ecommercebackend.ecommercebackend.data.repository.UserRepository;
import ecommercebackend.ecommercebackend.data.repository.UserRolesRepository;
import ecommercebackend.ecommercebackend.dto.RoleDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;

@Service
@RequiredArgsConstructor
public class RoleService implements CrudService<RoleDTO> {
    private final RoleRepository roleRepository;
    private final UserRolesRepository userRolesRepository;
    private final UserRepository userRepository;

    @Override
    public List<RoleDTO> getAllItem() {
        return MapstructMapper.INSTANCE.roleToRoleDTO(roleRepository.findAll());
    }

    @Override
    public RoleDTO getItemById(int id) throws InvalidIdException, NotfoundException {
        return MapstructMapper.INSTANCE.roleToRoleDTO(roleRepository.findById(id).orElseThrow(() -> new NotfoundException(Category.class)));
    }

    @Override
    public RoleDTO addItem(RoleDTO item) {
        roleRepository.save(MapstructMapper.INSTANCE.rolDtoToRole(item));
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        roleRepository.deleteById(id);
    }

    @Override
    public RoleDTO updateItem(RoleDTO item) {
        roleRepository.save(MapstructMapper.INSTANCE.rolDtoToRole(item));
        return item;
    }

    public UserRole addRoleToUser(UserRole userRole, int id) throws Exception {
        User user = userRepository.findById(userRole.getUser().getId()).orElseThrow(() -> new NotfoundException(User.class));
        Role role = roleRepository.findById(userRole.getRole().getId()).orElseThrow(() -> new NotfoundException(Role.class));

        List<UserRole> roleList = userRolesRepository.findAllByUserId(id);
        roleList.stream()
                .filter(userRole1 -> Objects.equals(userRole1.getRole().getName(), "admin"))
                .findFirst().orElseThrow(() -> new Exception("user is not an admin"));
        if (userRolesRepository.findByUserIdAndRoleId(user.getId(), role.getId()).isPresent()) {
            throw new Exception("User already have this role");
        }
        userRole.setUser(user);
        userRole.setRole(role);
        return userRolesRepository.save(userRole);
    }


}
