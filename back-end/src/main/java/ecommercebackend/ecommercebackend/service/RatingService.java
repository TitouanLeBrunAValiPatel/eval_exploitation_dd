package ecommercebackend.ecommercebackend.service;

import ecommercebackend.ecommercebackend.data.entity.database.Product;
import ecommercebackend.ecommercebackend.data.entity.database.Rating;
import ecommercebackend.ecommercebackend.data.repository.RatingRepository;
import ecommercebackend.ecommercebackend.dto.RatingDTO;
import ecommercebackend.ecommercebackend.dto.UserDTO;
import ecommercebackend.ecommercebackend.dto.mapper.MapstructMapper;
import ecommercebackend.ecommercebackend.dto.product.ProductDTO;
import ecommercebackend.ecommercebackend.exception.InvalidIdException;
import ecommercebackend.ecommercebackend.exception.NotfoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class RatingService implements CrudService<RatingDTO> {

    private final RatingRepository ratingRepository;
    private final ProductService productService;
    private final UserService userService;

    @Override
    public List<RatingDTO> getAllItem() {
        return MapstructMapper.INSTANCE.ratingToRatingDTO(ratingRepository.findAll());
    }

    @Override
    public RatingDTO getItemById(int id) throws InvalidIdException {
        RatingDTO ratingDTO = MapstructMapper.INSTANCE.ratingToRatingDTO(ratingRepository.findById(id), null);
        if (ratingDTO == null) {
            throw new InvalidIdException(Rating.class, id);
        }
        return ratingDTO;
    }

    @Override
    public RatingDTO addItem(RatingDTO item) throws InvalidIdException {
        UserDTO user = userService.getItemById(item.getUserDTO().getId());
        ProductDTO product = productService.getItemById(item.getProductDTO().getId());
        item.setUserDTO(user);
        item.setProductDTO(product);
        Rating rating = MapstructMapper.INSTANCE.ratingDTOToRating(item);
        rating = ratingRepository.save(rating);
        item.setId(rating.getId());
        item.setUserDTO(null);
        item.setProductDTO(null);
        return item;
    }

    @Override
    public void deleteItemById(int id) {
        ratingRepository.deleteById(id);
    }

    @Override
    public RatingDTO updateItem(RatingDTO item) {
        ratingRepository.save(MapstructMapper.INSTANCE.ratingDTOToRating(item));
        return item;
    }


    public List<RatingDTO> getAllByIdProduct(int idProduct) throws NotfoundException, InvalidIdException {
        if (productService.getItemById(idProduct) == null) {
            throw new NotfoundException(Product.class);
        }
        List<Rating> ratings = ratingRepository.findAllByProductId(idProduct);
        List<RatingDTO> ratingDTOS = new ArrayList<>();

        ratings.forEach(rating -> {
            UserDTO userDTO = MapstructMapper.INSTANCE.userToUserDTO(rating.getUser());
            userDTO.setId(0);
            userDTO.setCity(null);
            userDTO.setGender(null);
            userDTO.setCity(null);
            userDTO.setPostCode(null);
            userDTO.setMail(null);
            userDTO.setPassword(null);

            ratingDTOS.add(MapstructMapper.INSTANCE.ratingToRatingDTO(rating, userDTO));
        });
        return ratingDTOS;
    }
}
